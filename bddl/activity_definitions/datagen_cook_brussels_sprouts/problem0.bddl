(define (problem datagen_cook_brussels_sprouts-0)
    (:domain omnigibson)

    (:objects
        brussels_sprouts.n.01_1 brussels_sprouts.n.01_2 brussels_sprouts.n.01_3 brussels_sprouts.n.01_4 brussels_sprouts.n.01_5 brussels_sprouts.n.01_6 brussels_sprouts.n.01_7 brussels_sprouts.n.01_8 - brussels_sprouts.n.01
        tupperware.n.01_1 - tupperware.n.01
        stockpot.n.01_1 - stockpot.n.01
        countertop.n.01_1 - countertop.n.01
        burner.n.02_1 - burner.n.02
        floor.n.01_1 - floor.n.01
        agent.n.01_1 - agent.n.01
    )
    
    (:init 
        (inside brussels_sprouts.n.01_1 tupperware.n.01_1) 
        (inside brussels_sprouts.n.01_2 tupperware.n.01_1) 
        (inside brussels_sprouts.n.01_3 tupperware.n.01_1) 
        (inside brussels_sprouts.n.01_4 tupperware.n.01_1) 
        (inside brussels_sprouts.n.01_5 tupperware.n.01_1) 
        (inside brussels_sprouts.n.01_6 tupperware.n.01_1) 
        (inside brussels_sprouts.n.01_7 tupperware.n.01_1) 
        (inside brussels_sprouts.n.01_8 tupperware.n.01_1) 
        (ontop tupperware.n.01_1 countertop.n.01_1)
        (not 
            (cooked brussels_sprouts.n.01_1)
        ) 
        (not 
            (cooked brussels_sprouts.n.01_2)
        ) 
        (not 
            (cooked brussels_sprouts.n.01_3)
        ) 
        (not 
            (cooked brussels_sprouts.n.01_4)
        ) 
        (not 
            (cooked brussels_sprouts.n.01_5)
        ) 
        (not 
            (cooked brussels_sprouts.n.01_6)
        ) 
        (not 
            (cooked brussels_sprouts.n.01_7)
        ) 
        (not 
            (cooked brussels_sprouts.n.01_8)
        ) 
        (ontop stockpot.n.01_1 burner.n.02_1)
        (inroom countertop.n.01_1 kitchen) 
        (inroom burner.n.02_1 kitchen) 
        (inroom floor.n.01_1 kitchen) 
        (ontop agent.n.01_1 floor.n.01_1)
    )
    
    (:goal 
        (and 
            (forall 
                (?brussels_sprouts.n.01 - brussels_sprouts.n.01)
                (cooked ?brussels_sprouts.n.01)
            )
        )
    )
)