(define (problem can_fruit-0)
    (:domain omnigibson)

    (:objects
        water.n.06_1 - water.n.06
        stockpot.n.01_1 - stockpot.n.01
        cabinet.n.01_1 - cabinet.n.01
        mason_jar.n.01_1 mason_jar.n.01_2 - mason_jar.n.01
        peach.n.03_1 peach.n.03_2 peach.n.03_3 peach.n.03_4 - peach.n.03
        electric_refrigerator.n.01_1 - electric_refrigerator.n.01
        countertop.n.01_1 - countertop.n.01
        floor.n.01_1 - floor.n.01
        agent.n.01_1 - agent.n.01
    )
    
    (:init 
        (filled stockpot.n.01_1 water.n.06_1) 
        (inside mason_jar.n.01_1 cabinet.n.01_1) 
        (inside mason_jar.n.01_2 cabinet.n.01_1) 
        (inside peach.n.03_1 electric_refrigerator.n.01_1) 
        (inside peach.n.03_2 electric_refrigerator.n.01_1) 
        (inside peach.n.03_3 electric_refrigerator.n.01_1) 
        (inside peach.n.03_4 electric_refrigerator.n.01_1) 
        (ontop stockpot.n.01_1 countertop.n.01_1) 
        (inroom cabinet.n.01_1 kitchen) 
        (inroom electric_refrigerator.n.01_1 kitchen) 
        (inroom countertop.n.01_1 kitchen) 
        (inroom floor.n.01_1 kitchen) 
        (ontop agent.n.01_1 floor.n.01_1)
    )
    
    (:goal 
        (and 
            (forall 
                (?mason_jar.n.01 - mason_jar.n.01) 
                (and
                    (inside ?mason_jar.n.01 ?cabinet.n.01_1)
                    (forn
                        (2)
                        (?peach.n.03 - peach.n.03)
                        (inside ?peach.n.03 ?mason_jar.n.01)
                    )
                    (filled ?mason_jar.n.01 ?water.n.06_1)
                )
            ) 
            (forall 
                (?mason_jar.n.01 - mason_jar.n.01)
                (not
                    (open ?mason_jar.n.01)
                )
            )
        )
    )
)
