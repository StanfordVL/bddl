(define (problem can_vegetables-0)
    (:domain omnigibson)

    (:objects
        asparagus.n.02_1 asparagus.n.02_2 asparagus.n.02_3 - asparagus.n.02
        chopping_board.n.01_1 - chopping_board.n.01
        hingeless_jar.n.01_1 hingeless_jar.n.01_2 hingeless_jar.n.01_3 - hingeless_jar.n.01
        cabinet.n.01_1 - cabinet.n.01
        lid.n.02_1 lid.n.02_2 lid.n.02_3 - lid.n.02
        countertop.n.01_1 - countertop.n.01
        carving_knife.n.01_1 - carving_knife.n.01
        floor.n.01_1 - floor.n.01
        agent.n.01_1 - agent.n.01
    )
    
    (:init 
        (ontop asparagus.n.02_1 chopping_board.n.01_1) 
        (ontop asparagus.n.02_2 chopping_board.n.01_1) 
        (ontop asparagus.n.02_3 chopping_board.n.01_1) 
        (inside hingeless_jar.n.01_1 cabinet.n.01_1) 
        (inside hingeless_jar.n.01_2 cabinet.n.01_1) 
        (inside hingeless_jar.n.01_3 cabinet.n.01_1) 
        (inside lid.n.02_1 cabinet.n.01_1) 
        (inside lid.n.02_2 cabinet.n.01_1) 
        (inside lid.n.02_3 cabinet.n.01_1) 
        (ontop carving_knife.n.01_1 chopping_board.n.01_1) 
        (ontop chopping_board.n.01_1 countertop.n.01_1) 
        (inroom cabinet.n.01_1 kitchen) 
        (inroom countertop.n.01_1 kitchen) 
        (inroom floor.n.01_1 kitchen) 
        (ontop agent.n.01_1 floor.n.01_1)
    )
    
    (:goal 
        (and 
            (forpairs 
                (?asparagus.n.02 - asparagus.n.02)
                (?hingeless_jar.n.01 - hingeless_jar.n.01)
                (inside ?asparagus.n.02 ?hingeless_jar.n.01)
            )
            (forpairs 
                (?lid.n.02 - lid.n.02)
                (?hingeless_jar.n.01 - hingeless_jar.n.01)
                (attached ?lid.n.02 ?hingeless_jar.n.01)
            )
            (forall 
                (?hingeless_jar.n.01 - hingeless_jar.n.01) 
                (inside ?hingeless_jar.n.01 ?cabinet.n.01_1)
            ) 
        )
    )
)